{"version":3,"sources":["components/nav/Nav.js","components/PointCounter.js","components/card/Card.js","components/Jumbotron.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","className","href","src","alt","children","PointCounter","incrementPoints","newPoints","state","points","setState","topPoints","resetPoints","this","React","Component","Card","handleClick","gameUpdate","id","img","cardImg","cardId","altTxt","cardAtlTxt","onClick","Jumbotron","Game","update","started","selectedCardIds","indexOf","counter","push","shuffleCards","cardsArray","cards","i","length","j","Math","floor","random","ref","map","ele","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79cfba3f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = props => {\r\n  return(\r\n    <nav className=\"navbar text-white bg-red\">\r\n      <a className=\"navbar-brand\" href=\"/\"><img src=\"img/P5.png\" alt=\"p5\" className=\"nav-img\"/></a>\r\n      <div className=\"nav-text stylized-text\">Arcana Clicker</div>\r\n      {props.children}\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Nav;","import React from \"react\";\r\n\r\nclass PointCounter extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n\r\n    this.state = {\r\n      points: 0,\r\n      topPoints: 0\r\n    };\r\n  }\r\n\r\n  // Increments our points and ups the top points if its greater than\r\n  incrementPoints = () => {\r\n    let newPoints = this.state.points + 1;\r\n    this.setState({\r\n      points: newPoints,\r\n      topPoints: newPoints > this.state.topPoints ? newPoints : this.state.topPoints\r\n    });\r\n  }\r\n\r\n  // Resets the point counter\r\n  resetPoints = () => {\r\n    this.setState({points: 0});\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"ml-auto nav-text stylized-text\">\r\n        Top: {this.state.topPoints} | Points: {this.state.points}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PointCounter;","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nclass Card extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n\r\n    this.state = {\r\n      img: props.cardImg,\r\n      id: props.cardId,\r\n      altTxt: props.cardAtlTxt \r\n    };\r\n  }\r\n\r\n  // Tell the game to update\r\n  handleClick = () => {\r\n    this.props.gameUpdate(this.state.id);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col-lg-2 col-md-4 col-6 px-0 mb-2\">\r\n        <img className=\"img-fluid card-img\" src={this.state.img} alt={this.state.altTxt} onClick={this.handleClick}></img>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nconst Jumbotron = props => {\r\n  return(\r\n    <div className=\"jumbotron bg-red rounded-0 border-top border-bottom border-white\">\r\n      <h1 className=\"display-4  text-white stylized-text\">Arcana Clicker</h1>\r\n      <p className=\"text-white stylized-text\">Click a card to earn points, but don't click a card more than once.</p>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport Nav from \"./nav/Nav\";\r\nimport PointCounter from \"./PointCounter\";\r\nimport Card from \"./card/Card\";\r\nimport cards from \"../cards.json\";\r\nimport Jumbotron from \"./Jumbotron\";\r\n\r\nclass Game extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.selectedCardIds = [];\r\n\r\n    this.state = {\r\n      cards: cards,\r\n      started: false\r\n    }\r\n  }\r\n\r\n  // Update the game whenever a card is clicked\r\n  update = (cardId) => {\r\n    // Hide our jumbotron.\r\n    this.setState({started: true});\r\n    \r\n    // Has the card already been clicked?\r\n    if(this.selectedCardIds.indexOf(cardId) === -1){\r\n      this.counter.incrementPoints();\r\n      this.selectedCardIds.push(cardId);\r\n    }\r\n    else {\r\n      this.selectedCardIds = [];\r\n      this.counter.resetPoints();\r\n    }\r\n    this.shuffleCards();\r\n  }\r\n\r\n  // Shuffles our cards using Durstenfeld shuffle.\r\n  shuffleCards = () => {\r\n    // Don't mess with the state, copy the array\r\n    let cardsArray = [...this.state.cards];\r\n\r\n    for (let i = cardsArray.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [cardsArray[i], cardsArray[j]] = [cardsArray[j], cardsArray[i]];\r\n    }\r\n\r\n    this.setState({cards: cardsArray});\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <Nav>\r\n          <PointCounter ref={(counter) => { this.counter = counter }} />\r\n        </Nav>\r\n        {!this.state.started && <Jumbotron />}\r\n        <div className=\"container-fluid mx-0 px-0 mt-2\">\r\n          <div className=\"row m-auto\">\r\n            {\r\n              this.state.cards.map(ele => {\r\n                return (<Card key={ele.cardId} cardId={ele.cardId} cardImg={ele.cardImg} altTxt={ele.altTxt} gameUpdate={this.update} />);\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}